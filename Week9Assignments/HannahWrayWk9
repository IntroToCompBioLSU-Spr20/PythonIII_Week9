{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulation of DNA Sequence Evolution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment, we're going to write code to simulate the evolution of a DNA sequence through time, with one change at a site at each time step.\n",
    "\n",
    "AACGT -> AAGGT -> ATGGT -> ATGGC -> ...\n",
    "\n",
    "To do this, we'll need some functions from both the `random` and `copy` modules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import needed modules\n",
    "import random\n",
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we'll need to create a random starting sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The four nucleotides\n",
    "nucs = [\"A\",\"C\",\"G\",\"T\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Length of sequence\n",
    "seqLen = 24\n",
    "\n",
    "# Use a for loop and random.choice() to create a random DNA sequence (startSeq) with length seqLen\n",
    "# startSeq should be a list\n",
    "\n",
    "startSeq = []\n",
    "for i in range(seqLen):\n",
    "    startSeq.append( random.choice(nucs) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# startSeq = []\n",
    "# for _ in range(seqLen):\n",
    "#    startSeq.append( random.choice(nucs) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the number of time steps to simulate\n",
    "steps = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list to hold the set of sequences from each time step in the simulation\n",
    "seqs = []\n",
    "seqs.append( startSeq )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['C', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'A', 'A', 'G', 'G', 'T', 'G', 'A', 'G']\n",
      "['C', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'A', 'A', 'G', 'G', 'T', 'G', 'C', 'G']\n",
      "['C', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'A', 'A', 'T', 'G', 'T', 'G', 'C', 'G']\n",
      "['C', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'A', 'A', 'T', 'G', 'T', 'T', 'C', 'G']\n",
      "['C', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'T', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'G', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'T', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'T', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'G', 'G', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'A', 'C', 'A', 'T', 'A', 'T', 'G', 'G', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'T', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'G', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'A', 'C', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'G', 'C', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'T', 'C', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'G', 'A', 'T', 'T', 'G', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'C', 'A', 'T', 'T', 'G', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'C', 'A', 'G', 'T', 'G', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'C', 'A', 'G', 'T', 'T', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'C', 'A', 'G', 'A', 'T', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'A', 'T', 'G', 'G', 'C', 'C', 'G']\n",
      "['A', 'C', 'C', 'C', 'A', 'G', 'A', 'T', 'T', 'T', 'C', 'T', 'T', 'A', 'C', 'A', 'C', 'C', 'T', 'G', 'G', 'C', 'C', 'G']\n"
     ]
    }
   ],
   "source": [
    "# Use a for loop to simulate changes to the sequence across time steps\n",
    "for sequence in range(steps):\n",
    "    # Randomly pick an index in your sequence to change\n",
    "    indexChange = random.choice(range(seqLen))\n",
    "    \n",
    "    # Create a copy of the last sequence in seqs using copy.copy()\n",
    "    newSeq = copy.copy(seqs[-1])\n",
    "    \n",
    "    # Draw a new nucleotide and make sure that it's different than what you started with\n",
    "    # Hint: a while loop would be very useful here\n",
    "    newNuc = random.choice(nucs)\n",
    "    while newNuc == newSeq[indexChange]:\n",
    "        newNuc = random.choice(nucs)\n",
    "    \n",
    "    # Update the randomly chosen position in the new sequence with the new nucleotide\n",
    "    newSeq[indexChange] = newNuc\n",
    "    \n",
    "    # Add the updated sequence to the seqs list\n",
    "    seqs.append(newSeq)\n",
    "    \n",
    "    # Print all sequences\n",
    "    print(seqs[sequence])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print all sequences -- if needed, you can uncomment the code below\n",
    "#for i in range(steps):\n",
    "#    print(seqs[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CCCGGTTGACCGTGCAAAGGTGAG\n",
      "TGGATGGGTCATAACCTATGGCTG\n",
      "Hamming distance between first and last sequences is: 18\n"
     ]
    }
   ],
   "source": [
    "# Print the starting sequence as a string\n",
    "startSeqStr = \"\"\n",
    "for n in startSeq:\n",
    "    startSeqStr += n\n",
    "print(startSeqStr)\n",
    "\n",
    "# Print the ending sequence as a string\n",
    "lastSeqStr = \"\"\n",
    "for n in seqs[len(seqs)-1]:\n",
    "    lastSeqStr += n\n",
    "print(lastSeqStr)\n",
    "\n",
    "# Print the Hamming distance between the starting and ending sequences\n",
    "dist = 0\n",
    "for i in range( len(startSeq) ):\n",
    "    endSeq = seqs[len(seqs)-1]\n",
    "    if startSeq[i] != endSeq[i]:\n",
    "        dist += 1\n",
    "\n",
    "print( \"Hamming distance between first and last sequences is: \" + str(dist) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Hamming distance between two sequences is simply the number of nucleotide positions at which they differ. What is the Hamming distance between your starting and ending sequences? How does this value compare if you re-run the simulation several times, first with a small number of steps and next with a much larger number of steps?\n",
    "\n",
    "My first Hamming distance was 18.\n",
    "Re-running the simulation several times with a small number of steps results in a smaller Hamming distance, as it is limited by a small number of steps. Re-running with a large number of steps results in a Hamming distance similar to the inital amount of steps, as the distance is limited by the length of the sequence.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Amino acid sequence: WMGHNLWL\n"
     ]
    }
   ],
   "source": [
    "# Here is a dictionary that translates between codons in a DNA sequence and amino acids\n",
    "gencode = {\n",
    "    'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',\n",
    "    'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',\n",
    "    'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',\n",
    "    'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',\n",
    "    'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',\n",
    "    'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',\n",
    "    'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',\n",
    "    'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',\n",
    "    'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',\n",
    "    'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',\n",
    "    'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',\n",
    "    'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',\n",
    "    'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',\n",
    "    'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',\n",
    "    'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',\n",
    "    'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W'}\n",
    "\n",
    "# Translate your ending DNA sequence into an amino acid sequence\n",
    "# Make sure your sequence length is a multiple of 3!\n",
    "if len(lastSeqStr) % 3 == 0: # translates if sequence length is multiple of 3\n",
    "    aminoList = [] # breaks up sequence into codons\n",
    "    for i in range( 0,len(lastSeqStr),3 ):\n",
    "        aminoList.append( lastSeqStr[i:i+3] )\n",
    "    aminoStr = \"\" # translate codons into amino acid\n",
    "    for i in aminoList:\n",
    "        aminoStr = aminoStr + gencode.get(i)\n",
    "    print( \"Amino acid sequence: \" + aminoStr )\n",
    "else: \n",
    "    print(\"Sequence length is not a multiple of 3. \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
